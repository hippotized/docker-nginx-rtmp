daemon off;
worker_processes auto;
error_log /dev/stdout info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen ${RTMP_PORT};
        chunk_size 4096;

        application input {
            live on;

            # for each received stream, transcode for adaptive streaming
			# This single ffmpeg command takes the input and transforms
			# the source into 4 different streams with different bitrates
			# and qualities. these settings respect the aspect ratio.
            exec_push ffmpeg -i rtmp://localhost:1935/input/$name -async 1 -vsync -1
              -c:v libx264 -c:a libfdk_aac -b:v 256k  -b:a 64k  -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/$name_low
              -c:v libx264 -c:a libfdk_aac -b:v 768k  -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/$name_mid
              -c:v libx264 -c:a libfdk_aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/$name_high;
              #-c:v libx264 -c:a libfdk_aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/hls/$name_hd720;
        }

        application hls {
            live on;
            hls on;
            hls_fragment_naming system;
            hls_fragment 5s;
            hls_playlist_length 30s;
            hls_path /opt/data/hls;
            hls_nested on;

            #hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
            hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
        }
    }
}

http {
    server_tokens off;
    tcp_nopush on;
    sendfile off;
    access_log /dev/stdout combined;

    ssl_ciphers         EECDH+AES256:EECDH+AES128;
    ssl_protocols       TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    server {
        listen ${HTTP_PORT};

        # Uncomment these lines to enable SSL.
        # Update the ssl paths with your own certificate and private key.
        # listen ${HTTPS_PORT} ssl;
        # ssl_certificate     /opt/certs/example.com.crt;
        # ssl_certificate_key /opt/certs/example.com.key;

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            root /opt/data;
            add_header Cache-Control no-cache;

            # CORS setup
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Expose-Headers Content-Length;

            # allow CORS preflight requests
			if ($request_method = 'OPTIONS') {
				add_header Access-Control-Allow-Origin *;
				add_header Access-Control-Max-Age 1728000;
				add_header Content-Type 'text/plain charset=UTF-8';
				add_header Content-Length 0;
				return 204;
			}
        }

        location /live {
            alias /opt/data/hls;
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Expose-Headers Content-Length;

            # allow CORS preflight requests
			if ($request_method = 'OPTIONS') {
				add_header Access-Control-Allow-Origin *;
				add_header Access-Control-Max-Age 1728000;
				add_header Content-Type 'text/plain charset=UTF-8';
				add_header Content-Length 0;
				return 204;
			}
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /www/static;
        }

        location /crossdomain.xml {
            default_type text/xml;
            expires 24h;
        }
    }
}
